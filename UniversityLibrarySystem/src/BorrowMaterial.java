import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import java.util.Calendar;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Omayr
 */
public class BorrowMaterial extends javax.swing.JFrame {

    private Student student;
    private DefaultTableModel tableModel;

    /**
     * Creates new form BorrowMaterial
     */
    public BorrowMaterial() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setupTable();
        loadAvailableBooks();
    }
    
    /**
     * Creates new form BorrowMaterial for a specific student
     * @param student the Student object who will borrow books
     */
    public BorrowMaterial(Student student) {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.student = student;
        setupTable();
        loadAvailableBooks();
    }

    /**
     * Setup table columns and formatting
     */
    private void setupTable() {
        tableModel = (DefaultTableModel) jTable2.getModel();
        // Clear existing data
        tableModel.setRowCount(0);
        
        // Ensure column headers are set correctly
        String[] columnNames = {"ISBN", "Book Name", "Author", "Category", "Location"};
        tableModel.setColumnIdentifiers(columnNames);
    }
    
    /**
     * Load available books from the database
     */
    private void loadAvailableBooks() {
        Connection conn = DBManager.openCon();
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database", "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            // Query to get available books (those with ACTIVE status)
            String query = "SELECT b.ISBN, b.TITLE, a1.NAME as AUTHOR1, a2.NAME as AUTHOR2, " +
                           "b.CATEGORY, l.FLOOR, l.SECTION, l.SHELF, l.ROW " +
                           "FROM BOOK b " +
                           "LEFT JOIN AUTHOR a1 ON b.AUTHOR1_ID = a1.AUTHOR_ID " +
                           "LEFT JOIN AUTHOR a2 ON b.AUTHOR2_ID = a2.AUTHOR_ID " +
                           "LEFT JOIN LOCATION l ON b.LOCATION_ID = l.LOCATION_ID " +
                           "WHERE b.STATUS = 1";
            // UUU
            ResultSet rs = DBManager.query(conn, query);
            
            tableModel.setRowCount(0);
            
            int rowCount = 0;
            while (rs != null && rs.next()) {
                rowCount++;
                int isbn = rs.getInt("ISBN");
                String title = rs.getString("TITLE");
                
                // Combine authors if there are multiple
                String author1 = rs.getString("AUTHOR1");
                String author2 = rs.getString("AUTHOR2");
                String authors = author1;
                if (author2 != null && !author2.isEmpty()) {
                    authors += ", " + author2;
                }
                
                String category = rs.getString("CATEGORY");
                
                // Format location information
                int floor = rs.getInt("FLOOR");
                String section = rs.getString("SECTION");
                String shelf = rs.getString("SHELF");
                float row = rs.getFloat("ROW");
                String location = "Floor " + floor + ", " + section + " section, " + 
                                 "Shelf " + shelf + ", Row " + row;
                
                // Add row to table
                tableModel.addRow(new Object[]{
                    isbn, title, authors, category, location
                });
            }
            
            // If no records were found, add a message
            if (rowCount == 0) {
                tableModel.addRow(new Object[]{"No available books found", "", "", "", ""});
            }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Error loading books: " + ex.getMessage(), 
                                         "Database Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error loading books: " + ex.getMessage());
        } finally {
            DBManager.closeCon(conn);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        confirmBorrow = new javax.swing.JButton();
        cancelBorrow = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Borrow Material");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(522, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(37, 37, 37))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Available Material", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ISBN", "Book Name", "Author", "Category", "Location"
            }
        ));
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
        );

        confirmBorrow.setBackground(new java.awt.Color(51, 153, 255));
        confirmBorrow.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        confirmBorrow.setForeground(new java.awt.Color(255, 255, 255));
        confirmBorrow.setText("Confirm");
        confirmBorrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBorrowActionPerformed(evt);
            }
        });

        cancelBorrow.setBackground(new java.awt.Color(51, 153, 255));
        cancelBorrow.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cancelBorrow.setForeground(new java.awt.Color(255, 255, 255));
        cancelBorrow.setText("Cancel");
        cancelBorrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBorrowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(cancelBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBorrow, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmBorrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBorrowActionPerformed
        // Check if a book is selected
        int selectedRow = jTable2.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a book to borrow.", 
                                         "Selection Required", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Check if we have a student object
        if (student == null) {
            JOptionPane.showMessageDialog(this, "No student information available. Please login again.", 
                                         "Authentication Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Get selected book information
        int isbn = Integer.parseInt(tableModel.getValueAt(selectedRow, 0).toString());
        String bookTitle = tableModel.getValueAt(selectedRow, 1).toString();
        
        // Create a new borrow record
        Connection conn = DBManager.openCon();
        if (conn == null) {
            JOptionPane.showMessageDialog(this, "Failed to connect to database", 
                                         "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            // Calculate dates
            Date borrowDate = new Date(); // Current date
            
            // Set due date (14 days from today)
            Calendar calendar = Calendar.getInstance();
            calendar.setTime(borrowDate);
            calendar.add(Calendar.DAY_OF_MONTH, 14);
            Date dueDate = calendar.getTime();
            
            // Insert borrow record
            java.sql.Date sqlBorrowDate = new java.sql.Date(borrowDate.getTime());
            java.sql.Date sqlDueDate = new java.sql.Date(dueDate.getTime());
            
            String insertQuery = "INSERT INTO BORROW (BORROW_DATE, DUE_DATE, STATUS, RENEWAL_COUNT, FINE_AMOUNT, STUDENT_ID, BOOK_ID) " +
                                 "VALUES ('" + sqlBorrowDate + "', '" + sqlDueDate + "', 'Borrowed', 0, 0.0, " + 
                                 student.getUserID() + ", " + isbn + ")";
            
            int result = DBManager.updateQuery(conn, insertQuery);
            
            if (result > 0) {
                // Update book status to unavailable
                String updateBookQuery = "UPDATE BOOK SET STATUS = 'DISABLED' WHERE ISBN = " + isbn;
                DBManager.updateQuery(conn, updateBookQuery);
                
                JOptionPane.showMessageDialog(this, 
                    "Book '" + bookTitle + "' has been borrowed successfully.\n" +
                    "Due date: " + sqlDueDate, 
                    "Borrow Successful", JOptionPane.INFORMATION_MESSAGE);
                
                // Refresh the table to remove the borrowed book
                loadAvailableBooks();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to borrow the book. Please try again.", 
                                             "Borrow Failed", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error borrowing book: " + ex.getMessage(), 
                                         "Database Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("Error borrowing book: " + ex.getMessage());
        } finally {
            DBManager.closeCon(conn);
        }
    }//GEN-LAST:event_confirmBorrowActionPerformed

    private void cancelBorrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBorrowActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBorrowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BorrowMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BorrowMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BorrowMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BorrowMaterial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BorrowMaterial().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBorrow;
    private javax.swing.JButton confirmBorrow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
