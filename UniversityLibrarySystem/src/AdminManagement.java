import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Omayr
 */
public class AdminManagement extends javax.swing.JFrame {

    private AdminController adminController;
    private ArrayList<Admin> adminList;
    private DefaultTableModel tableModel;
    
    /**
     * Creates new form AdminManagement
     */
    public AdminManagement() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
        adminController = new AdminController();
        setupTable();
        loadAdmins();
        
        addAdminBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdminBtnActionPerformed(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addAdminBtn = new javax.swing.JButton();
        updateAdminBtn = new javax.swing.JButton();
        deleteAdminBtn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        addAdminBtn.setBackground(new java.awt.Color(51, 153, 255));
        addAdminBtn.setText("Add Admin");

        updateAdminBtn.setBackground(new java.awt.Color(51, 153, 255));
        updateAdminBtn.setText("Update Admin");
        updateAdminBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAdminBtnActionPerformed(evt);
            }
        });

        deleteAdminBtn.setBackground(new java.awt.Color(51, 153, 255));
        deleteAdminBtn.setText("Delete Admin");
        deleteAdminBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAdminBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(addAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(updateAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(deleteAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteAdminBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Admins", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 0, 18))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Email", "Status"
            }
        ));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void setupTable() {
        tableModel = (DefaultTableModel) jTable1.getModel();
        
        String[] columnNames = {"ID", "Name", "Email", "Status"};
        tableModel.setColumnIdentifiers(columnNames);
        
        tableModel.setRowCount(0);
    }
    
    
    private void loadAdmins() {
        tableModel.setRowCount(0);
        
        adminList = adminController.getAllAdmins();
        
        for (Admin admin : adminList) {
            String status = admin.getStatus() == AdminController.Status.ACTIVE ? "Active" : "Disabled";
            Object[] rowData = {admin.getUserID(), admin.getName(), admin.getEmail(), status};
            tableModel.addRow(rowData);
        }
    }
    

    private void addAdminBtnActionPerformed(java.awt.event.ActionEvent evt) {
        String name = JOptionPane.showInputDialog(this, "Enter admin name:", "Add Admin", JOptionPane.PLAIN_MESSAGE);
        if (name == null || name.trim().isEmpty()) {
            return; 
        }
        
        String email = JOptionPane.showInputDialog(this, "Enter admin email:", "Add Admin", JOptionPane.PLAIN_MESSAGE);
        if (email == null || email.trim().isEmpty()) {
            return;
        }
        
        String password = JOptionPane.showInputDialog(this, "Enter admin password:", "Add Admin", JOptionPane.PLAIN_MESSAGE);
        if (password == null || password.trim().isEmpty()) {
            return; 
        }
        
      
        boolean success = false;
        try {
            success = adminController.addAdmin(name, email, password, AdminController.Status.ACTIVE);
        } catch (SQLException ex) {
            Logger.getLogger(AdminManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if (success) {
            JOptionPane.showMessageDialog(this, "Admin added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadAdmins();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to add admin.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
  
    private void updateAdminBtnActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an admin to update.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
      
        int adminId = (int) jTable1.getValueAt(selectedRow, 0);
        Admin selectedAdmin = null;
        
        for (Admin admin : adminList) {
            if (admin.getUserID() == adminId) {
                selectedAdmin = admin;
                break;
            }
        }
        
        if (selectedAdmin == null) {
            JOptionPane.showMessageDialog(this, "Error finding admin data.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        String name = JOptionPane.showInputDialog(this, "Enter new name:", selectedAdmin.getName());
        if (name == null) {
            return; 
        }
        
        String email = JOptionPane.showInputDialog(this, "Enter new email:", selectedAdmin.getEmail());
        if (email == null) {
            return; 
        }
        
        String password = JOptionPane.showInputDialog(this, "Enter new password (leave empty to keep current):", "");
        if (password == null) {
            return; 
        }
        
        
        if (password.trim().isEmpty()) {
            password = selectedAdmin.getPassword();
        }
        
        String[] statusOptions = {"Active", "Disabled"};
        int currentStatusIndex = (selectedAdmin.getStatus() == AdminController.Status.ACTIVE) ? 0 : 1;
        int statusChoice = JOptionPane.showOptionDialog(this, "Select status:",
                "Update Admin", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE,
                null, statusOptions, statusOptions[currentStatusIndex]);
        
        if (statusChoice == -1) {
            return; 
        }
        
        AdminController.Status newStatus = (statusChoice == 0) ? AdminController.Status.ACTIVE : AdminController.Status.DISABLED;
        
       
        boolean success = adminController.updateAdmin(adminId, name, email, password, newStatus);
        
        if (success) {
            JOptionPane.showMessageDialog(this, "Admin updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            loadAdmins(); // Refresh the table
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update admin.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    /**
     * Delete selected admin from database
     */
    private void deleteAdminBtnActionPerformed(java.awt.event.ActionEvent evt) {
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an admin to delete.", "No Selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Get the selected admin ID
        int adminId = (int) jTable1.getValueAt(selectedRow, 0);
        
        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(this, 
                "Are you sure you want to delete this admin?", 
                "Confirm Deletion", 
                JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = adminController.deleteAdmin(adminId);
            
            if (success) {
                JOptionPane.showMessageDialog(this, "Admin deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadAdmins(); // Refresh the table
            } else {
                JOptionPane.showMessageDialog(this, "Failed to delete admin.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAdminBtn;
    private javax.swing.JButton deleteAdminBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton updateAdminBtn;
    // End of variables declaration//GEN-END:variables
}
